6.1:

Comma operator evaluates left operand and discards result, then evaluates right operand and
returns it. Lowest precedence, and is left associative.

Grammar rule:
comma_operator -> expression ("," expression)*
====================================================
6.2:

Ternary operator.

a == b ? a : b ? c : d

is right associative. ->
a == b ? a : (b ? c : d).

Since for a ? b : c,
a, b, and c can all be expressions, it must allow expression precedence level.

Grammar rule:
ternary_operator -> (expression "?" expression ":")* expression

alternatively, since right associativity, just use:

ternary_operator -> expression "?" expression ":" ternary_operator | expression

(actually replace expression with comma_operator)
===========================================================
6.3

handle all binary operators appearing without a left hand operand. Report as error,
but also parse and discard right hand operator with appropriate precedence.

binary operators: equality, term, comparison, and factor.

equality -> comparison (("!=" | "==") comparison)* |
            ("!=" | "==") comparison)

=====================================
Corrections:

6.1:
Comma precedence should be between expression and equality. Also,
for the purpose of the syntax tree, you still want a binary node
containing both operands of the comma operator.

6.2
Conditional precedence should be between expression and equality.
Also note that each of the operands should have different precedence.
The right operand is recursive, since right to left associativity.
The left operand is equality, which is straightforward. The middle
operand is actually expression. This is because we are copying c precedence
rules. see:  https://en.cppreference.com/w/c/language/operator_precedence.html#cite_note-3

6.3
I think where I put the error productions works correctly, but
you probably want them all in one place for organization purposes??
